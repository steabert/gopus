// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package rds

import (
	"context"
)

const addSong = `-- name: AddSong :exec
INSERT INTO songs ( title, path ) VALUES ( ?, ? )
`

type AddSongParams struct {
	Title string
	Path  *string
}

func (q *Queries) AddSong(ctx context.Context, arg AddSongParams) error {
	_, err := q.db.ExecContext(ctx, addSong, arg.Title, arg.Path)
	return err
}

const getTitle = `-- name: GetTitle :many
SELECT title, path FROM songs WHERE id = ?
`

type GetTitleRow struct {
	Title string
	Path  *string
}

func (q *Queries) GetTitle(ctx context.Context, id interface{}) ([]GetTitleRow, error) {
	rows, err := q.db.QueryContext(ctx, getTitle, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTitleRow
	for rows.Next() {
		var i GetTitleRow
		if err := rows.Scan(&i.Title, &i.Path); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTitles = `-- name: ListTitles :many
SELECT title, path FROM songs WHERE title LIKE ? ORDER BY title
`

type ListTitlesRow struct {
	Title string
	Path  *string
}

func (q *Queries) ListTitles(ctx context.Context, title string) ([]ListTitlesRow, error) {
	rows, err := q.db.QueryContext(ctx, listTitles, title)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTitlesRow
	for rows.Next() {
		var i ListTitlesRow
		if err := rows.Scan(&i.Title, &i.Path); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
